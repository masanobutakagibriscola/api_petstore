/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.1.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import org.openapitools.model.Error;
import org.openapitools.model.NewPet;
import org.openapitools.model.Pet;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;
import springfox.documentation.annotations.ApiIgnore;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2022-01-13T10:10:12.365180Z[UTC]")
@Validated
@Api(value = "pets", description = "the pets API")
public interface PetsApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /pets
     * Creates a new pet in the store.  Duplicates are allowed
     *
     * @param newPet Pet to add to the store (required)
     * @return pet response (status code 200)
     *         or unexpected error (status code 200)
     */
    @ApiOperation(value = "", nickname = "addPet", notes = "Creates a new pet in the store.  Duplicates are allowed", response = Pet.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "pet response", response = Pet.class),
        @ApiResponse(code = 200, message = "unexpected error", response = Error.class) })
    @PostMapping(
        value = "/pets",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<Pet> addPet(@ApiParam(value = "Pet to add to the store" ,required=true )  @Valid @RequestBody NewPet newPet) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "null";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /pets/{id}
     * deletes a single pet based on the ID supplied
     *
     * @param id ID of pet to delete (required)
     * @return pet deleted (status code 204)
     *         or unexpected error (status code 200)
     */
    @ApiOperation(value = "", nickname = "deletePet", notes = "deletes a single pet based on the ID supplied", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "pet deleted"),
        @ApiResponse(code = 200, message = "unexpected error", response = Error.class) })
    @DeleteMapping(
        value = "/pets/{id}",
        produces = { "application/json" }
    )
    default ResponseEntity<Void> deletePet(@ApiParam(value = "ID of pet to delete",required=true) @PathVariable("id") Long id) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /pets/{id}
     * Returns a user based on a single ID, if the user does not have access to the pet
     *
     * @param id ID of pet to fetch (required)
     * @return pet response (status code 200)
     *         or unexpected error (status code 200)
     */
    @ApiOperation(value = "", nickname = "findPetById", notes = "Returns a user based on a single ID, if the user does not have access to the pet", response = Pet.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "pet response", response = Pet.class),
        @ApiResponse(code = 200, message = "unexpected error", response = Error.class) })
    @GetMapping(
        value = "/pets/{id}",
        produces = { "application/json" }
    )
    default ResponseEntity<Pet> findPetById(@ApiParam(value = "ID of pet to fetch",required=true) @PathVariable("id") Long id) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "null";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /pets
     * Returns all pets from the system that the user has access to 
     *
     * @param tags tags to filter by (optional)
     * @param limit maximum number of results to return (optional)
     * @return pet response (status code 200)
     *         or unexpected error (status code 200)
     */
    @ApiOperation(value = "", nickname = "findPets", notes = "Returns all pets from the system that the user has access to ", response = Pet.class, responseContainer = "List", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "pet response", response = Pet.class, responseContainer = "List"),
        @ApiResponse(code = 200, message = "unexpected error", response = Error.class) })
    @GetMapping(
        value = "/pets",
        produces = { "application/json" }
    )
    default ResponseEntity<List<Pet>> findPets(@ApiParam(value = "tags to filter by") @Valid @RequestParam(value = "tags", required = false) List<String> tags,@ApiParam(value = "maximum number of results to return") @Valid @RequestParam(value = "limit", required = false) Integer limit) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "null";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
